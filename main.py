import os
import requests
from bs4 import BeautifulSoup
import telebot
from telebot import types
import sqlite3
import re
import logging
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
bot = telebot.TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
SOURCES = {
    "Habr": "https://habr.com/ru/news/",
    "RIA": "https://ria.ru/world/",
    "Lenta": "https://lenta.ru/rss/news"
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect("news.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS published_news (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        link TEXT UNIQUE,
        source TEXT,
        message_id INTEGER,
        published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
""")
conn.commit()


def fetch_html(url):
    """–ü–æ–ª—É—á–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.content
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML: {e}")
        return None


def parse_news(source, news_count):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞."""
    parsers = {
        "Lenta": parse_lenta_news,
        "Habr": parse_habr_news,
        "RIA": parse_ria_news
    }
    return parsers[source](news_count) if source in parsers else []


def parse_lenta_news(news_count):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å Lenta.ru."""
    html = fetch_html(SOURCES["Lenta"])
    if not html:
        return []
    soup = BeautifulSoup(html, 'xml')
    articles = soup.find_all("item")
    return [{
        'title': a.find("title").text.strip(),
        'link': a.find("link").text.strip()
    } for a in articles[:news_count]]


def parse_habr_news(news_count):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å Habr."""
    html = fetch_html(SOURCES["Habr"])
    if not html:
        return []
    soup = BeautifulSoup(html, 'html.parser')
    articles = soup.find_all("article")
    return [{
        'title': a.find("h2").text.strip(),
        'link': "https://habr.com" + a.find("a").get("href")
    } for a in articles[:news_count]]


def parse_ria_news(news_count):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –†–ò–ê –ù–æ–≤–æ—Å—Ç–∏."""
    html = fetch_html(SOURCES["RIA"])
    if not html:
        return []
    soup = BeautifulSoup(html, 'html.parser')
    articles = soup.find_all("a", class_="list-item__title")

    return [{
        'title': a.text.strip(),
        'link': a.get("href") if "http" in a.get("href") else f"https://ria.ru{a.get('href')}"
    } for a in articles[:news_count]]


def is_news_published(link):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞—Å—å –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Ä–∞–Ω–µ–µ."""
    cursor.execute("SELECT * FROM published_news WHERE link = ?", (link,))
    return cursor.fetchone() is not None


def save_news(title, link, source, message_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ë–î."""
    cursor.execute("INSERT OR IGNORE INTO published_news (title, link, source, message_id) VALUES (?, ?, ?, ?)",
                   (title, link, source, message_id))
    conn.commit()


def delete_news(link):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ."""
    cursor.execute("DELETE FROM published_news WHERE link = ?", (link,))
    conn.commit()


def delete_post_from_channel(message_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ message_id."""
    try:
        bot.delete_message(CHANNEL_ID, message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def generate_post(title, link, source):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    return f"\U0001F4F0 <b>{title}</b>\n\nüîó <a href=\"{link}\">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"


def main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª")
    markup.add("–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", "–û—Ç—á—ë—Ç")
    return markup


def source_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for source in SOURCES.keys():
        markup.add(source)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
def ask_source_news(message):
    """–í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º."""
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=source_menu())
    bot.register_next_step_handler(message, ask_news_count, "get")


@bot.message_handler(func=lambda message: message.text == "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª")
def ask_source_publish(message):
    """–í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π."""
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=source_menu())
    bot.register_next_step_handler(message, ask_news_count, "publish")


def ask_news_count(message, action):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    if message.text not in SOURCES:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=main_menu())
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π:")
    bot.register_next_step_handler(message, process_news_request, message.text, action)


def process_news_request(message, source, action):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
    try:
        news_count = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=main_menu())
        return

    news_list = parse_news(source, news_count)

    if not news_list:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())
        return

    for article in news_list:
        post = generate_post(article["title"], article["link"], source)

        if action == "get":
            bot.send_message(message.chat.id, post, parse_mode='HTML')
        elif action == "publish":
            if not is_news_published(article["link"]):
                sent_message = bot.send_message(CHANNEL_ID, post, parse_mode='HTML')
                save_news(article["title"], article["link"], source, sent_message.message_id)
                logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {article['title']}")

    bot.send_message(message.chat.id, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
def delete_news_request(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_delete_news)


def process_delete_news(message):
    link = message.text
    cursor.execute("SELECT message_id FROM published_news WHERE link = ?", (link,))
    result = cursor.fetchone()

    if result:
        message_id = result[0]
        delete_post_from_channel(message_id)
        delete_news(link)
        bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "–û—Ç—á—ë—Ç")
def request_report(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ—Ç—á—ë—Ç–∞ (/report YYYY-MM-DD –∏–ª–∏ /report last N):",
                     reply_markup=main_menu())


@bot.message_handler(commands=['report'])
def report_news(message):
    """–í—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º."""
    command = message.text.split(maxsplit=1)

    if len(command) == 1:
        cursor.execute(
            "SELECT title, link, source, published_at FROM published_news ORDER BY published_at DESC LIMIT 10")
    else:
        param = command[1]

        if re.match(r"\d{4}-\d{2}-\d{2}", param):
            cursor.execute("SELECT title, link, source, published_at FROM published_news WHERE DATE(published_at) = ?",
                           (param,))
        elif re.match(r"last \d+", param):
            num = int(param.split()[1])
            cursor.execute(
                "SELECT title, link, source, published_at FROM published_news ORDER BY published_at DESC LIMIT ?",
                (num,))
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report YYYY-MM-DD –∏–ª–∏ /report last N",
                             reply_markup=main_menu())
            return

    news_list = cursor.fetchall()
    if not news_list:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.", reply_markup=main_menu())
        return

    report_text = "\n\n".join([f"üìå <b>{title}</b>\nüîó <a href=\"{link}\">–ß–∏—Ç–∞—Ç—å</a>\nüì∞ {source} | üïí {published_at}" for
                               title, link, source, published_at in news_list])
    bot.send_message(message.chat.id, report_text, parse_mode="HTML", reply_markup=main_menu())


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(none_stop=True)
